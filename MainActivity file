package com.example.streamix;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.view.Gravity;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.VideoView;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

public class MainActivity extends AppCompatActivity {

    private static final int PICK_MEDIA_REQUEST = 1;
    private static final int PERMISSION_REQUEST = 100;
    private VideoView videoView;
    private MediaPlayer audioPlayer;
    private SeekBar seekBar;
    private Button playPauseBtn;
    private Button pickBtn;
    private TextView title;
    private Uri mediaUri;
    private boolean isAudio = false;
    private boolean isPlaying = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Modern UI with LinearLayout
        LinearLayout root = new LinearLayout(this);
        root.setOrientation(LinearLayout.VERTICAL);
        root.setGravity(Gravity.CENTER);
        root.setBackgroundColor(0xFF181A20); // dark background

        title = new TextView(this);
        title.setText("Streamix");
        title.setTextSize(32);
        title.setTextColor(0xFFFFFFFF);
        title.setGravity(Gravity.CENTER);
        title.setPadding(0, 80, 0, 40);
        root.addView(title);

        pickBtn = new Button(this);
        pickBtn.setText("Pick Media");
        pickBtn.setBackgroundColor(0xFF1F8EF1);
        pickBtn.setTextColor(0xFFFFFFFF);
        pickBtn.setAllCaps(false);
        pickBtn.setTextSize(18);
        root.addView(pickBtn);

        videoView = new VideoView(this);
        videoView.setVisibility(View.GONE);
        LinearLayout.LayoutParams videoParams = new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT, 600);
        videoParams.setMargins(0, 40, 0, 0);
        root.addView(videoView, videoParams);

        playPauseBtn = new Button(this);
        playPauseBtn.setText("Play");
        playPauseBtn.setBackgroundColor(0xFF26de81);
        playPauseBtn.setTextColor(0xFFFFFFFF);
        playPauseBtn.setAllCaps(false);
        playPauseBtn.setTextSize(18);
        playPauseBtn.setVisibility(View.GONE);
        root.addView(playPauseBtn);

        seekBar = new SeekBar(this);
        seekBar.setVisibility(View.GONE);
        root.addView(seekBar);

        setContentView(root);

        pickBtn.setOnClickListener(v -> checkPermissionAndPick());

        playPauseBtn.setOnClickListener(v -> {
            if (isAudio) {
                if (audioPlayer != null) {
                    if (audioPlayer.isPlaying()) {
                        audioPlayer.pause();
                        playPauseBtn.setText("Play");
                    } else {
                        audioPlayer.start();
                        playPauseBtn.setText("Pause");
                    }
                }
            } else {
                if (videoView.isPlaying()) {
                    videoView.pause();
                    playPauseBtn.setText("Play");
                } else {
                    videoView.start();
                    playPauseBtn.setText("Pause");
                }
            }
        });

        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if (fromUser) {
                    if (isAudio && audioPlayer != null) {
                        audioPlayer.seekTo(progress);
                    } else if (!isAudio && videoView != null) {
                        videoView.seekTo(progress);
                    }
                }
            }
            @Override public void onStartTrackingTouch(SeekBar seekBar) {}
            @Override public void onStopTrackingTouch(SeekBar seekBar) {}
        });
    }

    private void checkPermissionAndPick() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
                    != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this,
                        new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, PERMISSION_REQUEST);
            } else {
                pickMedia();
            }
        } else {
            pickMedia();
        }
    }

    private void pickMedia() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        String[] mimeTypes = {"audio/*", "video/*"};
        intent.putExtra(Intent.EXTRA_MIME_TYPES, mimeTypes);
        startActivityForResult(Intent.createChooser(intent, "Select Media"), PICK_MEDIA_REQUEST);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == PICK_MEDIA_REQUEST && resultCode == Activity.RESULT_OK && data != null) {
            mediaUri = data.getData();
            String type = getContentResolver().getType(mediaUri);
            if (type != null && type.startsWith("video")) {
                playVideo(mediaUri);
            } else if (type != null && type.startsWith("audio")) {
                playAudio(mediaUri);
            } else {
                Toast.makeText(this, "Unsupported file type", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void playVideo(Uri uri) {
        releaseAudio();
        isAudio = false;
        videoView.setVisibility(View.VISIBLE);
        playPauseBtn.setVisibility(View.VISIBLE);
        seekBar.setVisibility(View.VISIBLE);
        videoView.setVideoURI(uri);
        videoView.setOnPreparedListener(mp -> {
            seekBar.setMax(videoView.getDuration());
            videoView.start();
            playPauseBtn.setText("Pause");
            updateSeekBar();
        });
        videoView.setOnCompletionListener(mp -> playPauseBtn.setText("Play"));
    }

    private void playAudio(Uri uri) {
        releaseAudio();
        isAudio = true;
        videoView.setVisibility(View.GONE);
        playPauseBtn.setVisibility(View.VISIBLE);
        seekBar.setVisibility(View.VISIBLE);
        audioPlayer = MediaPlayer.create(this, uri);
        if (audioPlayer == null) {
            Toast.makeText(this, "Cannot play this audio", Toast.LENGTH_SHORT).show();
            return;
        }
        seekBar.setMax(audioPlayer.getDuration());
        audioPlayer.start();
        playPauseBtn.setText("Pause");
        updateSeekBar();
        audioPlayer.setOnCompletionListener(mp -> playPauseBtn.setText("Play"));
    }

    private void updateSeekBar() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (isAudio && audioPlayer != null) {
                    seekBar.setProgress(audioPlayer.getCurrentPosition());
                    if (audioPlayer.isPlaying()) seekBar.postDelayed(this, 500);
                } else if (!isAudio && videoView != null && videoView.isPlaying()) {
                    seekBar.setProgress(videoView.getCurrentPosition());
                    seekBar.postDelayed(this, 500);
                }
            }
        });
    }

    private void releaseAudio() {
        if (audioPlayer != null) {
            audioPlayer.release();
            audioPlayer = null;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        releaseAudio();
        if (videoView != null) videoView.suspend();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if (requestCode == PERMISSION_REQUEST) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                pickMedia();
            } else {
                Toast.makeText(this, "Permission required to access media", Toast.LENGTH_SHORT).show();
            }
        }
    }
}
